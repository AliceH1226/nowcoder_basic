//https://blog.csdn.net/PegasiTIO/article/details/89320473
//https://ac.nowcoder.com/acm/contest/998/H

#include <vector>
#include <iostream>
using namespace std;
static const auto io_sync_off = []() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    return nullptr;
}();

int n, m;
vector<int> nums;

void infer(int cur)
{
    if (nums.size() > m || nums.size() + n - cur + 1 < m)//当前比m大返回，剩下的构不成m返回
        return;
    if (nums.size() == m)
    {
        for (int num : nums)
            cout << num << " ";
        cout << endl;
        return;
    }
    nums.push_back(cur);
    infer(cur + 1);
    nums.pop_back();
    infer(cur + 1);
}

int main()
{
    cin >> n >> m;
    infer(1);
    return 0;
}




//状压
#include <vector>
#include <iostream>
using namespace std;
static const auto io_sync_off = []() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    return nullptr;
}();
int n, m;

void dfs(int cur, int num, int step)
{
    if (step > m || step + n - cur + 1 < m)
        return;
    if (step == m)
    {
        for (int i = 0; i < n; ++i)
            if (num >> i & 1)
                cout << i + 1 << " ";
        cout << endl;
        return;
    }
    for (int i = cur; i < n; ++i)
        dfs(i + 1, num | 1 << i, step + 1);
}

int main()
{
    cin >> n >> m;
    dfs(0, 0, 0);
    return 0;
}



//同上
#include <vector>
#include <iostream>
using namespace std;
static const auto io_sync_off = []() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    return nullptr;
}();
int n, m;
void dfs(int cur, int step, int num)
{
    if(step > m || step + n - cur + 1 < m)
        return;
    if (step == m)
    {
        for (int i = 0; i < n; ++i)
            if (num >> i & 1)
                cout << i + 1 << " ";
        cout << endl;
        return;
    }
    if(cur == n) 
        return;//到底之后返回，这里不返回会回溯到不是m个数的状态
    
    dfs(cur + 1, step+1, num | 1 << cur);
    dfs(cur + 1, step, num);// 不选的话，步数不用加1
}

int main()
{
    cin >> n >> m;
    dfs(0, 0, 0);
    return 0;
}
